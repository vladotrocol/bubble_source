#include "./DisplayKernel/OgreApplications/CycleOutput.h"
#include "./DisplayKernel/OgreUtils/CameraUtils.h"
#include "./CallibrationEngine/IClock.h"
using namespace OgreUtils;




static const int framesPerDrop=8;
static const int FPC=1;
static const int CPS=60;
//-------------------------------------------------------------------------------------
CycleOutput::CycleOutput(WaterDisplayInfo& wd, std::string cycleOutputCG="WD_cycleOutput")
	: displayData(wd)	
	, cycleOutputCG(cycleOutputCG)
	, numFrames(0)
	, status(PLAY)
	, awaitingRelease(false)
	, cyclesSinceLastSecond(0)
{
	offset_steps_per_layer=new int[wd.layers.size()];
	for(int i=0;i<wd.layers.size();i++)
		offset_steps_per_layer[i]=0;
}
//-------------------------------------------------------------------------------------
CycleOutput::~CycleOutput(void)
{
}
//-------------------------------------------------------------------------------------

void CycleOutput::chooseSceneManager(void)
{
    // Get the SceneManager, in this case a generic one
    mSceneMgr = mRoot->createSceneManager(Ogre::ST_GENERIC);
}

void CycleOutput::createCamera(void)
{
    mCamera = mSceneMgr->createCamera("mustardOutput");
    mCamera->setPosition(Ogre::Vector3(0,0,0));
    mCamera->lookAt(Ogre::Vector3(0,0,1));
    mCamera->setNearClipDistance(1);
    mCamera->setFrustumExtents(-0.5,0.5,0.5,-0.5);
	mCamera->setVisible(true);
}

int CycleOutput::createViewports(int curIndex)
{
    // Create one viewport, entire window
    Ogre::Viewport* LayerProjector = lightCrafter->addViewport(mCamera,curIndex);
    LayerProjector->setBackgroundColour(Ogre::ColourValue(1.0,1.0,1.0));
	
	// Alter the camera aspect ratio to match the viewport
    mCamera->setAspectRatio(Ogre::Real(LayerProjector->getActualWidth()) / Ogre::Real(LayerProjector->getActualHeight()));
	return ++curIndex;
	return curIndex;
}

void CycleOutput::_setConfiguration(Ogre::Root* r,Ogre::RenderWindow* rw, OIS::InputManager* mInputManager, OIS::Mouse* mMouse, OIS::Keyboard* mKeyboard){
	IOgreApplication::_setConfiguration(r,rw,mInputManager,mMouse,mKeyboard);
	// If returned true, user clicked OK so initialise
    Ogre::NameValuePairList misc;
	misc["monitorIndex"] = "1";  //I use two monitors, so I tell Ogre to draw on my main (#1) monitor
	misc["FullScreen"] = "Yes";  
	misc["Colour Depth"]="32";
	misc["Display Frequency"]="60.1";
	misc["FSAA"]="0";
	//now we need to create a render window manually
	lightCrafter = mRoot->createRenderWindow("WaterDisplay",608,684,true, &misc ); //pass our custom attributes in "misc"
	lightCrafter->setVSyncEnabled(true);
	lightCrafter->setVSyncInterval(1);
	lightCrafter->setPriority(0);
	lightCrafter->setFullscreen(true,608,684);

}


void CycleOutput::createScene(void)
{
	{//1. Configure a Background (DEBUG)
	mSceneMgr->setAmbientLight(Ogre::ColourValue(1.0f, 1.0f, 1.0f));
    Ogre::Light* light = mSceneMgr->createLight("MainLight");
    light->setPosition(20, 80, 50);
	}
	{
	Ogre::SceneNode* node= mSceneMgr->getRootSceneNode()->createChildSceneNode();
	node->setPosition(0,0,-1);
	node->attachObject(mCamera);
	}
	{ //3. Create two planes: Border and data with the a texture attached to it
	//3.1. The Plane node which contains the Plane entities 
    Ogre::ManualObject* layerPolygon=mSceneMgr->createManualObject("leftEyeManualObject");
	layerPolygon->setDynamic(true);
	std::string aux_str("leftEyeManualObjectMat");
	layerPolygon->begin(aux_str);
	layerPolygon->position(-0.5,  0.5,0);layerPolygon->textureCoord(0,0);
	layerPolygon->position(-0.5, -0.5,0);layerPolygon->textureCoord(0,1);
	layerPolygon->position(0.5,  -0.5,0);layerPolygon->textureCoord(1,1);
	layerPolygon->end();
	layerPolygon->begin(aux_str);
	layerPolygon->position(0.5, -0.5,0);layerPolygon->textureCoord(1,1);
	layerPolygon->position(0.5, 0.5,0);layerPolygon->textureCoord(1,0);
	layerPolygon->position(-0.5, 0.5,0);layerPolygon->textureCoord(0,0);
	layerPolygon->end();
	//1.b) Apply the material to the plane
	layerPolygon->setMaterialName(0,this->cycleOutputCG);
	layerPolygon->setMaterialName(1,this->cycleOutputCG);
	//layerPolygon->setMa
	Ogre::SceneNode* layerNode = mSceneMgr->getRootSceneNode()->createChildSceneNode();
    layerNode->attachObject(layerPolygon);
	//layerPolygon->getSection(0)->setCustomParameter(FPC_CG_index,Ogre::Vector4(layerData.framesPerCycle,layerData.framesPerCycle,layerData.framesPerCycle,layerData.framesPerCycle));
	//layerPolygon->getSection(1)->setCustomParameter(FPC_CG_index,Ogre::Vector4(layerData.framesPerCycle,layerData.framesPerCycle,layerData.framesPerCycle,layerData.framesPerCycle));
	}
}




bool CycleOutput::frameRenderingQueued(const Ogre::FrameEvent& evt)
{
	{	//Get FPS
		const int targetFramesPerSecond=60;
		const int measureOverNSeconds=1; //We print it over 5 seconds....
		
		float curSecond;
		float curTime=((float)(timer.getMicroseconds()+1)/1000000);
		//0. Initialize clock
		if(firstTime){
			timer.reset();
			cyclesSinceLastSecond=0;
			lastSecond=curSecond=1.0f*static_cast<int>(curTime);
			firstTime=false;
		}
		
		//1. Update number of images and cycles since last second
		cyclesSinceLastSecond++;
		//2. Determine in the second is finished and notify if necessary
		curSecond=static_cast<int>(curTime);
		if(curSecond>=lastSecond+measureOverNSeconds){
			//Correct frames missing
			int framesMissing=targetFramesPerSecond*measureOverNSeconds - cyclesSinceLastSecond;
			for(int l=0;l<displayData.layers.size();l++)
				offset_steps_per_layer[l]+=framesMissing;
				
			printf("%d frames missing/corrected!\n",framesMissing);
			cyclesSinceLastSecond=0;lastSecond=curSecond;
		}	
	}
	if(status==PLAY){
		_computeCurStencilsToUse();
	}
	
	if(status==RECORDING){
		static int framesToRecord=180;
		_computeCurStencilsToUse();
		if(framesToRecord>0){
			std::ostringstream name;
			name << (180-framesToRecord)<< "_at(";
			lightCrafter->writeContentsToTimestampedFile(""+name.str(),").png");
			framesToRecord--;
		}
		else{
			status=PLAY;
			framesToRecord=180;//So that it records nicely next time...
		}
	}
	if(numFrames>10)
	{	/*//Display the FPS that lightCrafter is getting
		static const Ogre::RenderTarget::FrameStats& stats = lightCrafter->getStatistics();
		static int frame=0;
		frame=(++frame)%300;
		if(frame==0)
			printf("\n FPS-> %.1f, AvFPS-> %.1f", stats.lastFPS, stats.avgFPS);*/
		return BaseApplication::frameRenderingQueued(evt);	
	}	
	else if(numFrames<10){
		numFrames++;
		return true;
	}
	else{//(numFrames==10)
		
		Ogre::MaterialPtr material = Ogre::MaterialManager::getSingleton().getByName(this->cycleOutputCG);
		for(int i=0;i<this->displayData.layers.size();i++)
			material->getTechnique(0)->getPass(0)->getTextureUnitState(i)->setTextureName(displayData.layers[i].outputTexture);
		numFrames++;
		return BaseApplication::frameRenderingQueued(evt);	
	}
	
	
}


bool CycleOutput::keyPressed( const OIS::KeyEvent &arg )
{	
	BaseApplication::keyPressed(arg);
	if(awaitingRelease)
		return true;
	if(arg.key == OIS::KC_Z)   // go to left eye camera
	{
		awaitingRelease=true;
		printf("next!");
		for(int l=0;l<displayData.layers.size();l++)
			displayData.layers[l].curCycle=(displayData.layers[l].curCycle+1)%framesPerDrop ;
	}
	if(arg.key == OIS::KC_Q)   
	{
		awaitingRelease=true;
		if(status==PAUSE)
			status=PLAY;	
		else status=PAUSE;
	}
	//Adjust each of the layers:
	/*if(arg.key >= OIS::KC_1 && arg.key<=OIS::KC_0){
		int layerID= arg.key - OIS::KC_1 ; 
		if(layerID>=0 && layerID< displayData.layers.size())
			displayData.layers[layerID].curCycle=(displayData.layers[layerID].curCycle+1)%framesPerDrop ;
	}*/
	if(arg.key == OIS::KC_1 )
		displayData.layers[0].curCycle=(displayData.layers[0].curCycle+1)%framesPerDrop ;
	if(arg.key == OIS::KC_2 )
		displayData.layers[1].curCycle=(displayData.layers[1].curCycle+1)%framesPerDrop ;
	if(arg.key == OIS::KC_3 )
		displayData.layers[2].curCycle=(displayData.layers[2].curCycle+1)%framesPerDrop ;
	
	//Modify the contents
	if(displayData.layers.size()==3 && arg.key >= OIS::KC_NUMPAD7 && arg.key<=OIS::KC_NUMPAD0){
		switch(arg.key ){
			case OIS::KC_NUMPAD0:
				displayData.layers[0].inputTexture="one.png";
				displayData.layers[1].inputTexture="two.png";
				displayData.layers[2].inputTexture="three.png";
			break;
			case OIS::KC_NUMPAD1:
				displayData.layers[0].inputTexture="cross.png";
				displayData.layers[1].inputTexture="square.png";
				displayData.layers[2].inputTexture="star.png";
			break;
			case OIS::KC_NUMPAD2:
				displayData.layers[0].inputTexture="eyes.png";
				displayData.layers[1].inputTexture="smile2.png";
				displayData.layers[2].inputTexture="face.png";
			break;
			case OIS::KC_NUMPAD3:
				displayData.layers[0].inputTexture="cheguevara.png";
				displayData.layers[1].inputTexture="bart.jpg";
				displayData.layers[2].inputTexture="darthvador.jpg";
			break;		
		}
	}
	
	if(status==PAUSE && arg.key==OIS::KC_E){
		awaitingRelease=true;
		for(int l=0;l<displayData.layers.size();l++)
			displayData.layers[l].curCycle=(displayData.layers[l].curCycle+1)%framesPerDrop;
	}
	if(status!=RECORDING && arg.key==OIS::KC_SPACE){
		awaitingRelease=true;
		status=RECORDING;
	}

	return true;
}

bool  CycleOutput::keyReleased( const OIS::KeyEvent &arg ){
	BaseApplication::keyReleased(arg);
	if(arg.key == OIS::KC_X || arg.key == OIS::KC_Z || arg.key == OIS::KC_Q || arg.key == OIS::KC_E || arg.key==OIS::KC_SPACE)   
		awaitingRelease=false;
	/*this->simulationManager->keyReleased(arg);
	if(visualDebug&& camControl)
		camControl->injectKeyUp(arg);*/
	return true;
}

void CycleOutput::_computeCurStencilsToUse(){
	for(int l=0;l<displayData.layers.size();l++){
		static int result;
		result=(displayData.layers[l].curCycle+1+offset_steps_per_layer[l])%framesPerDrop;
		while(result<0)
			result+=framesPerDrop;
		displayData.layers[l].curCycle=result;
		offset_steps_per_layer[l]=0;
		//printf("CurCycle[%d] %d\n", l, displayData.layers[l].curCycle);
	}
}

int CycleOutput::_getCurCycleFromClock(){
	float curTime=IClock::instance().getTimeMiliseconds();
	if(curTime<0)
		curTime=000.0f-curTime;
	float step=1000.0f/(FPC*CPS);
	int curImage=(((int)(curTime/step)))%(FPC*CPS);
	
	return curImage%framesPerDrop;

	//printf("\n Time-> %.1f, Cycle-> %d, Frame-> %d",curTime, frame, cycle);
}